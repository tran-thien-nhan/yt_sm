import React, { useState } from 'react';
import { Button, TextField, Typography, Box, List, ListItem, ListItemText, CircularProgress, ListItemIcon } from '@mui/material';
import FiberManualRecordIcon from '@mui/icons-material/FiberManualRecord';
import axios from 'axios';
import { apiKey } from '../const';
import pptxgen from 'pptxgenjs';
import { CodeBlock } from '../helper'; // Import CodeBlock component

const AutoSlideGenerator = ({ summary, isDarkMode }) => {
    const [slides, setSlides] = useState([]);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState('');
    const [slideCount, setSlideCount] = useState(5);

    const generateSlides = async () => {
        setIsLoading(true);
        setError('');
        try {
            const response = await axios.post(
                `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`,
                {
                    contents: [{
                        parts: [{
                            text: `Tạo ${slideCount} slide cho bài trình bày PowerPoint dựa trên nội dung sau. Mỗi slide nên có một tiêu đề, một câu mô tả ngắn gọn, và tối đa 3 điểm chính. Nếu có code, hãy đặt nó vào một trường riêng biệt. Trả về kết quả dưới dạng mảng JSON, mỗi phần tử đại diện cho một slide với cấu trúc {"title": "Tiêu đề slide", "description": "Mô tả ngắn gọn", "points": ["Điểm 1", "Điểm 2", "Điểm 3"], "code": "Đoạn code nếu có"}: ${summary}`
                        }]
                    }]
                }
            );

            console.log(response.data);

            const generatedContent = response.data.candidates[0]?.content?.parts[0]?.text;
            if (generatedContent) {
                // Remove markdown syntax and parse JSON
                const jsonString = generatedContent.replace(/```json\n|\n```/g, '').trim();
                const parsedSlides = JSON.parse(jsonString);
                setSlides(parsedSlides);
            } else {
                setError('Không thể tạo slides. Vui lòng thử lại.');
            }
        } catch (error) {
            console.error('Error generating slides:', error);
            setError('Đã xảy ra lỗi khi tạo slides. Vui lòng thử lại.');
        } finally {
            setIsLoading(false);
        }
    };

    const downloadPowerPoint = () => {
        const pptx = new pptxgen();

        slides.forEach((slide) => {
            const pptSlide = pptx.addSlide();
            
            // Add title
            pptSlide.addText(slide.title, { x: 0.5, y: 0.5, fontSize: 24, bold: true });
            
            // Add description
            pptSlide.addText(slide.description, { x: 0.5, y: 1.5, fontSize: 18 });
            
            // Add points
            slide.points.forEach((point, index) => {
                pptSlide.addText(point, { x: 0.7, y: 2.5 + (index * 0.5), fontSize: 14, bullet: true });
            });

            if (slide.code) {
                pptSlide.addText(slide.code, { x: 0.5, y: 3.5, fontSize: 10, fontFace: 'Courier New' });
            }
        });

        pptx.writeFile({ fileName: "AutoGeneratedSlides.pptx" });
    };

    return (
        <Box sx={{ mt: 4, color: isDarkMode ? 'white' : 'black' }}>
            <Typography variant="h6" gutterBottom>Tạo Slides Tự Động</Typography>
            <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                <TextField
                    type="number"
                    label="Số lượng slide"
                    value={slideCount}
                    onChange={(e) => setSlideCount(Math.max(1, parseInt(e.target.value) || 1))}
                    sx={{ mr: 2, input: { color: isDarkMode ? 'white' : 'black' } }}
                    InputLabelProps={{ style: { color: isDarkMode ? 'white' : 'black' } }}
                />
                <Button
                    variant="contained"
                    onClick={generateSlides}
                    disabled={isLoading}
                >
                    {isLoading ? <CircularProgress size={24} /> : 'Tạo Slides'}
                </Button>
            </Box>
            {error && <Typography color="error">{error}</Typography>}
            {slides.length > 0 && (
                <>
                    <Button
                        variant="contained"
                        onClick={downloadPowerPoint}
                        sx={{ mt: 2, mb: 2 }}
                    >
                        Tải PowerPoint
                    </Button>
                    <List>
                        {slides.map((slide, index) => (
                            <ListItem key={index} sx={{ flexDirection: 'column', alignItems: 'flex-start', mb: 4, border: '1px solid #ccc', borderRadius: '8px', padding: '16px' }}>
                                <Typography variant="h5" gutterBottom>{slide.title}</Typography>
                                <Typography variant="body1" gutterBottom>{slide.description}</Typography>
                                <List>
                                    {slide.points.map((point, pointIndex) => (
                                        <ListItem key={pointIndex}>
                                            <ListItemIcon>
                                                <FiberManualRecordIcon fontSize="small" />
                                            </ListItemIcon>
                                            <ListItemText primary={point} />
                                        </ListItem>
                                    ))}
                                </List>
                                {slide.code && (
                                    <CodeBlock language="javascript">
                                        {slide.code}
                                    </CodeBlock>
                                )}
                            </ListItem>
                        ))}
                    </List>
                </>
            )}
        </Box>
    );
};

export default AutoSlideGenerator;
